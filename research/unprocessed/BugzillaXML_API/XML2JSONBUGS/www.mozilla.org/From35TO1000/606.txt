{"bugs":[{"creation_time":"Wed Aug 05 14:00:00 EEST 1998","keywords":[],"see_also":[],"resolution":"INVALID","cf_blocking_fx":"---","cf_fx_iteration":"---","cf_blocking_b2g":"---","cf_status_b2g_1_4":"---","id":606,"is_open":false,"cf_qa_whiteboard":"","assigned_to_detail":{"name":"peterl-retired@formerly-netscape.com.tld","real_name":"Peter Linss","id":3826,"email":"peterl-retired@formerly-netscape.com.tld"},"creator_detail":{"name":"kipp@formerly-netscape.com.tld","real_name":"","id":3824,"email":"kipp@formerly-netscape.com.tld"},"cf_status_firefox37":"---","priority":"P2","cf_status_firefox36":"---","classification":"Components","cf_status_firefox35":"---","version":"Trunk","cf_status_firefox34":"---","op_sys":"Windows NT","last_change_time":"Wed Apr 11 08:25:12 EEST 2007","cf_crash_signature":"","mentors_detail":[],"cf_tracking_b2g":"---","cf_status_b2g_2_0m":"---","status":"VERIFIED","cf_feature_b2g":"---","is_cc_accessible":true,"cf_tracking_firefox37":"---","cf_tracking_firefox36":"---","cf_tracking_relnote_b2g":"---","flags":[],"cf_status_firefox_esr31":"---","whiteboard":"","platform":"x86","cf_tracking_firefox_esr31":"---","cf_blocking_fennec":"---","cf_fx_points":"---","cf_tracking_firefox35":"---","cf_tracking_firefox34":"---","cf_status_b2g_2_2":"---","cf_status_b2g_2_1":"---","cf_status_b2g_2_0":"---","assigned_to":"peterl-retired@formerly-netscape.com.tld","summary":"align=middle broken","cf_tracking_e10s":"---","cc":[],"severity":"normal","creator":"kipp@formerly-netscape.com.tld","product":"Core","depends_on":[],"cf_tracking_firefox_relnote":"---","blocks":[],"is_confirmed":true,"groups":[],"cf_last_resolved":"Fri Nov 06 00:01:00 EET 1998","url":"http://www.dilbert.com","qa_contact":"","target_milestone":"---","component":"CSS Parsing and Computation","is_creator_accessible":true,"cc_detail":[],"mentors":[],"cf_user_story":""}],"comments":[{"is_private":false,"creation_time":"Wed Aug 05 14:00:00 EEST 1998","creator":"kipp@formerly-netscape.com.tld","author":"kipp@formerly-netscape.com.tld","time":"Wed Aug 05 14:00:00 EEST 1998","text":"the vertical alignment code needs fixing; align=middle is busted.","id":1919,"bug_id":606,"tags":[]},{"is_private":false,"creation_time":"Fri Sep 11 04:45:59 EEST 1998","creator":"kipp@formerly-netscape.com.tld","author":"kipp@formerly-netscape.com.tld","time":"Fri Sep 11 04:45:59 EEST 1998","text":"I'm still waiting on some w3c related clarifications for a final go on my fixes. However, things do work better.","id":1920,"bug_id":606,"tags":[]},{"is_private":false,"creation_time":"Fri Oct 09 15:35:59 EEST 1998","creator":"kipp@formerly-netscape.com.tld","author":"kipp@formerly-netscape.com.tld","time":"Fri Oct 09 15:35:59 EEST 1998","text":"*** Bug 971 has been marked as a duplicate of this bug. ***","id":1921,"bug_id":606,"tags":[]},{"is_private":false,"creation_time":"Fri Oct 16 22:06:59 EEST 1998","creator":"kipp@formerly-netscape.com.tld","author":"kipp@formerly-netscape.com.tld","time":"Fri Oct 16 22:06:59 EEST 1998","text":"I've fixed the align=middle problem, and now I've noticed that there are some font differences between this page in raptor and nav4. Either its a parser bug or a style bug with tables (maybe)...  So I'm reassigning it to peter so that he can track down the problem","id":1922,"bug_id":606,"tags":[]},{"is_private":false,"creation_time":"Tue Oct 27 00:52:59 EET 1998","creator":"peterl-retired@formerly-netscape.com.tld","author":"peterl-retired@formerly-netscape.com.tld","time":"Tue Oct 27 00:52:59 EET 1998","text":"This is currently asserting in table code    NS_PRECONDITION (0<=aColIndex && aColIndex<colCount, \"bad col index arg\");  NTDLL! 77f76148() nsDebug::PreCondition(char * 0x00684c70, char * 0x00684c4c, char * 0x00684c18, int 574) line 75 + 13 bytes nsTableFrame::GetEffectiveColSpan(int 1, nsTableCellFrame * 0x012b5120) line 574 + 48 bytes BasicTableLayoutStrategy::AssignPreliminaryColumnWidths() line 321 + 34 bytes BasicTableLayoutStrategy::Initialize(nsSize * 0x00000000 {width=??? height=???}, int 2) line 139 nsTableFrame::Reflow(nsTableFrame * const 0x012b4934, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, const nsHTMLReflowState & {...}, unsigned int & 0) line 1645 nsContainerFrame::ReflowChild(nsIFrame * 0x012b4930, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, const nsHTMLReflowState & {...}, unsigned int & 0) line 310 + 28 bytes nsTableOuterFrame::IR_InnerTableReflow(nsTableOuterFrame * const 0x012b4890, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, OuterTableReflowState & {...}, unsigned int & 0) line 532 + 34 bytes nsTableOuterFrame::IR_TargetIsInnerTableFrame(nsTableOuterFrame * const 0x012b4890, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, OuterTableReflowState & {...}, unsigned int & 0) line 316 + 31 bytes nsTableOuterFrame::IR_TargetIsChild(nsTableOuterFrame * const 0x012b4890, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, OuterTableReflowState & {...}, unsigned int & 0, nsIFrame * 0x012b4930) line 289 + 31 bytes nsTableOuterFrame::IncrementalReflow(nsTableOuterFrame * const 0x012b4890, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, OuterTableReflowState & {...}, unsigned int & 0) line 274 + 35 bytes nsTableOuterFrame::Reflow(nsTableOuterFrame * const 0x012b4894, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, const nsHTMLReflowState & {...}, unsigned int & 0) line 942 + 35 bytes nsInlineReflow::ReflowFrame(nsHTMLReflowMetrics & {...}, unsigned int & 0) line 486 nsInlineReflow::ReflowFrame(nsIFrame * 0x012b4890) line 268 + 16 bytes nsBlockFrame::ReflowBlockFrame(nsBlockReflowState & {...}, LineData * 0x012b7aa0, nsIFrame * 0x012b4890, unsigned int & 16640) line 2959 + 12 bytes nsBlockFrame::ReflowLine(nsBlockReflowState & {...}, LineData * 0x012b7aa0, unsigned int & 16640) line 2615 + 24 bytes nsBlockFrame::ReflowLinesAt(nsBlockReflowState & {...}, LineData * 0x012b7aa0) line 2485 + 20 bytes nsBlockFrame::ChildIncrementalReflow(nsBlockReflowState & {...}) line 2448 + 19 bytes nsBlockFrame::Reflow(nsBlockFrame * const 0x012c7ef4, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, const nsHTMLReflowState & {...}, unsigned int & 0) line 1756 + 18 bytes nsBodyFrame::Reflow(nsBodyFrame * const 0x012c7e04, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, const nsHTMLReflowState & {...}, unsigned int & 0) line 267 nsContainerFrame::ReflowChild(nsIFrame * 0x012c7e00, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, const nsHTMLReflowState & {...}, unsigned int & 0) line 310 + 28 bytes RootContentFrame::Reflow(RootContentFrame * const 0x012c7254, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, const nsHTMLReflowState & {...}, unsigned int & 0) line 407 nsContainerFrame::ReflowChild(nsIFrame * 0x012c7250, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, const nsHTMLReflowState & {...}, unsigned int & 0) line 310 + 28 bytes RootFrame::Reflow(RootFrame * const 0x012c7b04, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, const nsHTMLReflowState & {...}, unsigned int & 0) line 164 nsHTMLReflowCommand::Dispatch(nsHTMLReflowCommand * const 0x01302b50, nsIPresContext & {...}, nsHTMLReflowMetrics & {...}, const nsSize & {width=9120 height=4410}, nsIRenderingContext & {...}) line 169 PresShell::ProcessReflowCommands() line 666 PresShell::ExitReflowLock(PresShell * const 0x012828b0) line 416 PresShell::ContentChanged(PresShell * const 0x012828b8, nsIDocument * 0x0124a120, nsIContent * 0x012a7c4c, nsISupports * 0x00000000) line 759 nsDocument::ContentChanged(nsDocument * const 0x0124a120, nsIContent * 0x012a7c4c, nsISupports * 0x00000000) line 532 UpdateImageFrame(nsIPresContext & {...}, nsIFrame * 0x012b5b90, int 3) line 411 nsFrameImageLoader::ReflowFrame() line 344 + 29 bytes nsFrameImageLoader::Notify(nsIImageRequest * 0x012dd3c0, nsIImage * 0x00000000, nsImageNotification nsImageNotification_kDimensions, int 600, int 231, void * 0x00000000) line 199 ns_observer_proc(void * 0x012dd4f0, long 2, void * 0x0012fc80, void * 0x012dd3c0) line 252 XP_NotifyObservers(OpaqueObserverList * 0x012dd480, long 2, void * 0x0012fc80) line 259 + 28 bytes il_dimensions_notify(il_container_struct * 0x012dd580, int 600, int 231) line 110 + 18 bytes il_size(il_container_struct * 0x012dd580) line 592 + 29 bytes il_gif_write(il_container_struct * 0x012dd580, unsigned char * 0x017bba58, long 128) line 1273 + 9 bytes IL_StreamWrite(il_container_struct * 0x012dd580, unsigned char * 0x017bba58, long 128) line 805 + 18 bytes NetReaderImpl::Write(unsigned char * 0x017bba58, long 128) line 92 + 20 bytes ImageConsumer::OnDataAvailable(ImageConsumer * const 0x012ddcb0, nsIURL * 0x012dda00, nsIInputStream * 0x012f4170, int 4380) line 237 nsDocumentBindInfo::OnDataAvailable(nsDocumentBindInfo * const 0x012ddd00, nsIURL * 0x012dda00, nsIInputStream * 0x012f4170, int 4380) line 1384 + 30 bytes OnDataAvailableProxyEvent::HandleEvent(OnDataAvailableProxyEvent * const 0x01302f80) line 575 + 45 bytes StreamListenerProxyEvent::HandlePLEvent(PLEvent * 0x01302f84) line 421 + 12 bytes PL_HandleEvent(PLEvent * 0x01302f84) line 395 + 10 bytes PL_ProcessPendingEvents(PLEventQueue * 0x011d6700) line 357 + 9 bytes _md_EventReceiverProc(void * 0x010d059a, unsigned int 49431, unsigned int 0, long 18704128) line 675 + 9 bytes USER32! 77e71250()","id":1923,"bug_id":606,"tags":[]},{"is_private":false,"creation_time":"Tue Oct 27 09:02:59 EET 1998","creator":"buster@formerly-netscape.com.tld","author":"buster@formerly-netscape.com.tld","time":"Tue Oct 27 09:02:59 EET 1998","text":"the assert is fixed, so Peter can now fix the style problems","id":1924,"bug_id":606,"tags":[]},{"is_private":false,"creation_time":"Fri Nov 06 00:01:59 EET 1998","creator":"peterl-retired@formerly-netscape.com.tld","author":"peterl-retired@formerly-netscape.com.tld","time":"Fri Nov 06 00:01:59 EET 1998","text":"The HTML specifies <FONT face=\"Monaco, Terminal\">. We give you \"Terminal\", Nav doesn't and substitutes Arial.","id":1925,"bug_id":606,"tags":[]}]}
