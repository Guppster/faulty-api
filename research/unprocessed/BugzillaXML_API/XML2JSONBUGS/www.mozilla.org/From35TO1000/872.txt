{"bugs":[{"creation_time":"Wed Sep 23 18:02:28 EEST 1998","keywords":[],"see_also":[],"resolution":"INVALID","cf_blocking_fx":"---","cf_fx_iteration":"---","cf_blocking_b2g":"---","cf_status_b2g_1_4":"---","id":872,"is_open":false,"cf_qa_whiteboard":"","assigned_to_detail":{"name":"brendan@mozilla.org","real_name":"Brendan Eich [:brendan]","id":1214,"email":"brendan@mozilla.org"},"creator_detail":{"name":"rainer@aaa-plus.com","real_name":"","id":3940,"email":"rainer@aaa-plus.com"},"cf_status_firefox37":"---","priority":"P1","cf_status_firefox36":"---","classification":"Components","cf_status_firefox35":"---","version":"Trunk","cf_status_firefox34":"---","op_sys":"Other","last_change_time":"Fri Jan 18 08:39:55 EET 2002","cf_crash_signature":"","mentors_detail":[],"cf_tracking_b2g":"---","cf_status_b2g_2_0m":"---","status":"VERIFIED","cf_feature_b2g":"---","is_cc_accessible":true,"cf_tracking_firefox37":"---","cf_tracking_firefox36":"---","cf_tracking_relnote_b2g":"---","flags":[],"cf_status_firefox_esr31":"---","whiteboard":"","platform":"All","cf_tracking_firefox_esr31":"---","cf_blocking_fennec":"---","cf_fx_points":"---","cf_tracking_firefox35":"---","cf_tracking_firefox34":"---","cf_status_b2g_2_2":"---","cf_status_b2g_2_1":"---","cf_status_b2g_2_0":"---","assigned_to":"brendan@mozilla.org","summary":"Bogus \"property is not defined\" errors","cf_tracking_e10s":"---","cc":[],"severity":"major","creator":"rainer@aaa-plus.com","product":"Core","depends_on":[],"cf_tracking_firefox_relnote":"---","blocks":[],"is_confirmed":true,"groups":[],"cf_last_resolved":"Fri Sep 25 09:57:19 EEST 1998","url":"","qa_contact":"","target_milestone":"---","component":"JavaScript Engine","is_creator_accessible":true,"cc_detail":[],"mentors":[],"cf_user_story":""}],"comments":[{"is_private":false,"creation_time":"Wed Sep 23 18:02:28 EEST 1998","creator":"rainer@aaa-plus.com","author":"rainer@aaa-plus.com","time":"Wed Sep 23 18:02:28 EEST 1998","text":"The lookup code for the JavaScript property cache is wrong. False cache hits are possible when a property is cached as PROP_NOT_FOUND. To the user, the bug manifests itself as bogus \"property is not defined\" errors, in perfectly valid JavaScript programs.    This is the buggy code, file jsinterp.h:    #define PROPERTY_CACHE_TEST(cache, obj, id, prop)                        \\      PR_BEGIN_MACRO                                                       \\          uintN _hashIndex = (uintN)PROPERTY_CACHE_HASH(obj, id);          \\          JSPropertyCacheEntry *_pce = &(cache)->table[_hashIndex];        \\          (cache)->tests++;                                                \\          if (_pce->property &&                                            \\              (_pce->property == PROP_NOT_FOUND ||     /* *** BUG! obj has to be compared every time! *** */               _pce->property->object == obj) &&                           \\              _pce->symbolid == id) {                                      \\              prop = _pce->property;                                       \\          } else {                                                         \\              (cache)->misses++;                                           \\              prop = NULL;                                                 \\          }                                                                \\      PR_END_MACRO    The simplest fix is putting an extra field containing the object into the JSPropertyCacheEntry structure. That's what I did and it works. Here is the fixed section of jsinterp.h:    typedef struct JSPropertyCacheEntry {      JSObject    *obj;           /* weak link to object */      JSProperty  *property;      /* weak link to property */      jsval       symbolid;       /* strong link to name atom, or index jsval */  } JSPropertyCacheEntry;    typedef struct JSPropertyCache {      JSPropertyCacheEntry table[PROPERTY_CACHE_SIZE];      JSBool               empty;      uint32               fills;      uint32               recycles;      uint32               tests;      uint32               misses;      uint32               flushes;      uint32               pflushes;  } JSPropertyCache;    #define PROP_NOT_FOUND   ((JSProperty *)1)  #define PROP_FOUND(prop) ((prword)(prop) & (prword)-2)    #define PROPERTY_CACHE_FILL(cx, cache, obj, id, prop)                         \\      PR_BEGIN_MACRO                                                            \\          uintN _hashIndex = (uintN)PROPERTY_CACHE_HASH(obj, id);               \\          JSPropertyCacheEntry *_pce = &(cache)->table[_hashIndex];             \\          if (_pce->property) {                                                 \\              (cache)->recycles++;                                              \\              if (!JSVAL_IS_INT(_pce->symbolid))                                \\                  js_DropAtom(cx, (JSAtom *)_pce->symbolid);                    \\          }                                                                     \\          _pce->obj = obj;                                                      \\          _pce->property = prop;                                                \\          _pce->symbolid = id;                                                  \\          if (!JSVAL_IS_INT(id))                                                \\              js_HoldAtom(cx, (JSAtom *)id);                                    \\          (cache)->empty = JS_FALSE;                                            \\          (cache)->fills++;                                                     \\      PR_END_MACRO    #define PROPERTY_CACHE_TEST(cache, obj, id, prop)                             \\      PR_BEGIN_MACRO                                                            \\          uintN _hashIndex = (uintN)PROPERTY_CACHE_HASH(obj, id);               \\          JSPropertyCacheEntry *_pce = &(cache)->table[_hashIndex];             \\          (cache)->tests++;                                                     \\          if (_pce->obj == obj && _pce->symbolid == id) {                       \\              prop = _pce->property;                                            \\          } else {                                                              \\              (cache)->misses++;                                                \\              prop = NULL;                                                      \\          }                                                                     \\      PR_END_MACRO","id":3416,"bug_id":872,"tags":[]},{"is_private":false,"creation_time":"Fri Sep 25 09:57:59 EEST 1998","creator":"mike+mozilla@meer.net","author":"mike+mozilla@meer.net","time":"Fri Sep 25 09:57:59 EEST 1998","text":"Turns out that this was based on the code from the original March drop.","id":3417,"bug_id":872,"tags":[]},{"is_private":false,"creation_time":"Mon Jun 07 22:56:59 EEST 1999","creator":"leger@formerly-netscape.com.tld","author":"leger@formerly-netscape.com.tld","time":"Mon Jun 07 22:56:59 EEST 1999","text":"Changing component to \"Javascript Engine\".  \"Javascript\" component is being retired.","id":3418,"bug_id":872,"tags":[]}]}
