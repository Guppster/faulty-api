{"bugs":[{"creation_time":"Wed Sep 09 04:07:32 EEST 1998","keywords":[],"see_also":[],"resolution":"FIXED","cf_blocking_fx":"---","cf_fx_iteration":"---","cf_blocking_b2g":"---","cf_status_b2g_1_4":"---","id":753,"is_open":false,"cf_qa_whiteboard":"","assigned_to_detail":{"name":"joe@drew.ca","real_name":"Joe Drew (not getting mail)","id":94,"email":"joe@drew.ca"},"creator_detail":{"name":"kipp@formerly-netscape.com.tld","real_name":"","id":3824,"email":"kipp@formerly-netscape.com.tld"},"cf_status_firefox37":"---","priority":"--","cf_status_firefox36":"---","classification":"Components","cf_status_firefox35":"---","version":"Trunk","cf_status_firefox34":"---","op_sys":"All","last_change_time":"Sat Apr 26 09:26:29 EEST 2014","cf_crash_signature":"","mentors_detail":[],"cf_tracking_b2g":"---","cf_status_b2g_2_0m":"---","status":"RESOLVED","cf_feature_b2g":"---","is_cc_accessible":true,"cf_tracking_firefox37":"---","cf_tracking_firefox36":"---","cf_tracking_relnote_b2g":"---","flags":[],"cf_status_firefox_esr31":"---","whiteboard":"","platform":"All","cf_tracking_firefox_esr31":"---","cf_blocking_fennec":"---","cf_fx_points":"---","cf_tracking_firefox35":"---","cf_tracking_firefox34":"---","cf_status_b2g_2_2":"---","cf_status_b2g_2_1":"---","cf_status_b2g_2_0":"---","assigned_to":"joe@drew.ca","summary":"Combined nsImage* & gfxImageFrame","cf_tracking_e10s":"---","cc":["bobbyholley@gmail.com","bugzilla@blakeross.com","bzbarsky@mit.edu","bzcc@fowlsmurf.net","dao@mozilla.com","deprecationmail@gmail.com","dholbert@mozilla.com","dolske@mozilla.com","fjutt@blink.se","fullmetaljacket.xp+bugmail@gmail.com","gavin.sharp@gmail.com","highmind63@gmail.com","jmathies@mozilla.com","jmuizelaar@mozilla.com","joe@drew.ca","jruderman@gmail.com","jwalden+bmo@mit.edu","jwatt@jwatt.org","karlt@mozbugz.karlt.net","mark.finkle@gmail.com","mook@songbirdnest.com","mozilla.bugs@alyoung.com","mozilla@kaply.com","mozilla@Weilbacher.org","paper@animecity.nu","pavlov@pavlov.net","ramiro@eazel.com","rjesup@jesup.org","rkawaguchi@mozilla.com","robert@accettura.com","roc@ocallahan.org","roland.mainz@nrubsig.org","ryanvm@gmail.com","samuel.sidler+old@gmail.com","steve.england@gmail.com","stmoebius@gmx.de","t.matsuu@gmail.com","tdowner@mozilla.com","tellrob@gmail.com","tor@acm.org","torres.dark@gmail.com","wulf.bugmail@yahoo.com","wuno@wmeinl.de","xtc4uall@gmail.com"],"severity":"normal","creator":"kipp@formerly-netscape.com.tld","product":"Core","depends_on":[70938,505473,505474,505525,505663,505887,506113,513738],"cf_tracking_firefox_relnote":"---","blocks":[66967,66979,435294,435296,467112,501490,502710,503973,504617],"is_confirmed":true,"groups":[],"cf_last_resolved":"Tue Jul 21 01:56:09 EEST 2009","url":"","qa_contact":"","target_milestone":"---","component":"ImageLib","is_creator_accessible":true,"cc_detail":[{"name":"bobbyholley@gmail.com","real_name":"Bobby Holley (Busy with media, don't ask for DOM/JS/XPConnect things)","id":313730,"email":"bobbyholley@gmail.com"},{"name":"bugzilla@blakeross.com","real_name":"Blake Ross","id":13548,"email":"bugzilla@blakeross.com"},{"name":"bzbarsky@mit.edu","real_name":"Boris Zbarsky [:bz]","id":20209,"email":"bzbarsky@mit.edu"},{"name":"bzcc@fowlsmurf.net","real_name":"James May [:fowl]","id":317549,"email":"bzcc@fowlsmurf.net"},{"name":"dao@mozilla.com","real_name":"DÃ£o Gottwald [:dao]","id":219124,"email":"dao@mozilla.com"},{"name":"deprecationmail@gmail.com","real_name":"d","id":346332,"email":"deprecationmail@gmail.com"},{"name":"dholbert@mozilla.com","real_name":"Daniel Holbert [:dholbert]","id":278074,"email":"dholbert@mozilla.com"},{"name":"dolske@mozilla.com","real_name":"Justin Dolske [:Dolske]","id":27780,"email":"dolske@mozilla.com"},{"name":"fjutt@blink.se","real_name":"Fredrik Hultkrantz","id":251293,"email":"fjutt@blink.se"},{"name":"fullmetaljacket.xp+bugmail@gmail.com","real_name":"-fullmetaljacket-","id":258169,"email":"fullmetaljacket.xp+bugmail@gmail.com"},{"name":"gavin.sharp@gmail.com","real_name":":Gavin Sharp [email: gavin@gavinsharp.com]","id":103593,"email":"gavin.sharp@gmail.com"},{"name":"highmind63@gmail.com","real_name":"Nochum Sossonko [:Natch]","id":297995,"email":"highmind63@gmail.com"},{"name":"jmathies@mozilla.com","real_name":"Jim Mathies [:jimm]","id":279663,"email":"jmathies@mozilla.com"},{"name":"jmuizelaar@mozilla.com","real_name":"Jeff Muizelaar [:jrmuizel]","id":309398,"email":"jmuizelaar@mozilla.com"},{"name":"joe@drew.ca","real_name":"Joe Drew (not getting mail)","id":94,"email":"joe@drew.ca"},{"name":"jruderman@gmail.com","real_name":"Jesse Ruderman","id":11608,"email":"jruderman@gmail.com"},{"name":"jwalden+bmo@mit.edu","real_name":"Jeff Walden [:Waldo] (remove +bmo to email)","id":83595,"email":"jwalden+bmo@mit.edu"},{"name":"jwatt@jwatt.org","real_name":"Jonathan Watt [:jwatt] (vacation Dec 22 - Jan 5)","id":32767,"email":"jwatt@jwatt.org"},{"name":"karlt@mozbugz.karlt.net","real_name":"Karl Tomlinson (:karlt)","id":274246,"email":"karlt@mozbugz.karlt.net"},{"name":"mark.finkle@gmail.com","real_name":"Mark Finkle (:mfinkle)","id":252194,"email":"mark.finkle@gmail.com"},{"name":"mook@songbirdnest.com","real_name":"Mook (songbird dead account)","id":282721,"email":"mook@songbirdnest.com"},{"name":"mozilla.bugs@alyoung.com","real_name":"Tanner M. Young [:tmyoung]","id":312301,"email":"mozilla.bugs@alyoung.com"},{"name":"mozilla@kaply.com","real_name":"Mike Kaply [:mkaply]","id":7313,"email":"mozilla@kaply.com"},{"name":"mozilla@Weilbacher.org","real_name":"Peter Weilbacher","id":33840,"email":"mozilla@Weilbacher.org"},{"name":"paper@animecity.nu","real_name":"ArronM (:paper)","id":38080,"email":"paper@animecity.nu"},{"name":"pavlov@pavlov.net","real_name":"Stuart Parmenter","id":5756,"email":"pavlov@pavlov.net"},{"name":"ramiro@eazel.com","real_name":"Ramiro Estrugo","id":602,"email":"ramiro@eazel.com"},{"name":"rjesup@jesup.org","real_name":"Randell Jesup [:jesup] PTO until Jan 5","id":11539,"email":"rjesup@jesup.org"},{"name":"rkawaguchi@mozilla.com","real_name":"Ryo Kawaguchi","id":348701,"email":"rkawaguchi@mozilla.com"},{"name":"robert@accettura.com","real_name":"Robert Accettura [:raccettura]","id":19284,"email":"robert@accettura.com"},{"name":"roc@ocallahan.org","real_name":"Robert O'Callahan (:roc) (Mozilla Corporation)","id":5038,"email":"roc@ocallahan.org"},{"name":"roland.mainz@nrubsig.org","real_name":"Roland Mainz","id":4432,"email":"roland.mainz@nrubsig.org"},{"name":"ryanvm@gmail.com","real_name":"[Away 24-Dec to 4-Jan] Ryan VanderMeulen [:RyanVM UTC-5]","id":75935,"email":"ryanvm@gmail.com"},{"name":"samuel.sidler+old@gmail.com","real_name":"Samuel Sidler (old account; do not CC)","id":190622,"email":"samuel.sidler+old@gmail.com"},{"name":"steve.england@gmail.com","real_name":"Steve England [:stevee]","id":144324,"email":"steve.england@gmail.com"},{"name":"stmoebius@gmx.de","real_name":"Stefan Moebius","id":23052,"email":"stmoebius@gmx.de"},{"name":"t.matsuu@gmail.com","real_name":"Takanori MATSUURA","id":1450,"email":"t.matsuu@gmail.com"},{"name":"tdowner@mozilla.com","real_name":"Tyler Downer [:Tyler]","id":310130,"email":"tdowner@mozilla.com"},{"name":"tellrob@gmail.com","real_name":"Rob Arnold [:robarnold]","id":279525,"email":"tellrob@gmail.com"},{"name":"tor@acm.org","real_name":"","id":589,"email":"tor@acm.org"},{"name":"torres.dark@gmail.com","real_name":"Rodrigo","id":295770,"email":"torres.dark@gmail.com"},{"name":"wulf.bugmail@yahoo.com","real_name":"WulfTheSaxon [:Wulf]","id":231953,"email":"wulf.bugmail@yahoo.com"},{"name":"wuno@wmeinl.de","real_name":"Walter Meinl","id":231410,"email":"wuno@wmeinl.de"},{"name":"xtc4uall@gmail.com","real_name":"XtC4UaLL [:xtc4uall]","id":104905,"email":"xtc4uall@gmail.com"}],"mentors":[],"cf_user_story":""}],"comments":[{"is_private":false,"creation_time":"Wed Feb 03 16:08:59 EET 1999","creator":"leger@formerly-netscape.com.tld","author":"leger@formerly-netscape.com.tld","time":"Wed Feb 03 16:08:59 EET 1999","text":"Setting all current Open/Normal to M4.","id":2711,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Sat Mar 06 06:01:59 EET 1999","creator":"paulmac@formerly-netscape.com.tld","author":"paulmac@formerly-netscape.com.tld","time":"Sat Mar 06 06:01:59 EET 1999","text":"per leger, assigning QA contacts to all open bugs without QA contacts according to list at http://bugzilla.mozilla.org/describecomponents.cgi?product=Browser","id":2712,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Sun Mar 07 20:41:59 EET 1999","creator":"christinehoff4@aol.com","author":"christinehoff4@aol.com","time":"Sun Mar 07 20:41:59 EET 1999","text":"Reassigning qa contact to elig@netscape.com","id":2713,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Apr 07 04:35:59 EEST 1999","creator":"vidur@formerly-netscape.com.tld","author":"vidur@formerly-netscape.com.tld","time":"Wed Apr 07 04:35:59 EEST 1999","text":"I presume Kipp meant that the methods should be NS_IMETHODs. I'm not sure why it was assigned to me. Michael, I presume this will go to one of the new gfx owners.","id":2714,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu May 20 17:53:59 EEST 1999","creator":"kmcclusk@formerly-netscape.com.tld","author":"kmcclusk@formerly-netscape.com.tld","time":"Thu May 20 17:53:59 EEST 1999","text":"Moving to M9","id":2715,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Aug 26 22:28:59 EEST 1999","creator":"kmcclusk@formerly-netscape.com.tld","author":"kmcclusk@formerly-netscape.com.tld","time":"Thu Aug 26 22:28:59 EEST 1999","text":"This requires changes on all three platforms WIN32, Linux, Mac for the platform dependant implementations + all of the places that call these methods need to be modified.  Also need to modify the postscript directory. Need to coordinate with platform owners, probably will need a carpool to checkin.  CC'ing platform owners, ramiro, beard, and cone.  XPCODE makes calls to methods on the nsIImage interface in: S:\\mozilla\\gfx\\src\\nsImageRenderer.cpp S:\\mozilla\\gfx\\tests\\btest\\BitTest.cpp","id":2716,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Aug 31 21:07:59 EEST 1999","creator":"kmcclusk@formerly-netscape.com.tld","author":"kmcclusk@formerly-netscape.com.tld","time":"Tue Aug 31 21:07:59 EEST 1999","text":"Moving to M12","id":2717,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Sep 23 18:21:59 EEST 1999","creator":"kmcclusk@formerly-netscape.com.tld","author":"kmcclusk@formerly-netscape.com.tld","time":"Thu Sep 23 18:21:59 EEST 1999","text":"Moving to M14","id":2718,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Apr 04 23:22:33 EEST 2000","creator":"kmcclusk@formerly-netscape.com.tld","author":"kmcclusk@formerly-netscape.com.tld","time":"Tue Apr 04 23:22:33 EEST 2000","text":"Don, could you look at this? ","id":251191,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jun 05 14:20:24 EEST 2000","creator":"dcone@formerly-netscape.com.tld","author":"dcone@formerly-netscape.com.tld","time":"Mon Jun 05 14:20:24 EEST 2000","text":"This bug has been marked future because we have determined that it is not  critical for netscape 6.0.  If you feel this is an error, or if it blocks your  work in some way -- please attach your concern to the bug for reconsideration.","id":317797,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jan 05 16:00:41 EET 2001","creator":"dcone@formerly-netscape.com.tld","author":"dcone@formerly-netscape.com.tld","time":"Fri Jan 05 16:00:41 EET 2001","text":"Kevin, is this still an issue.. or does this need to be done.   If you still want this done, assign it back to me.","id":552992,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jan 05 18:33:15 EET 2001","creator":"kmcclusk@formerly-netscape.com.tld","author":"kmcclusk@formerly-netscape.com.tld","time":"Fri Jan 05 18:33:15 EET 2001","text":"Reassigning to dcone.","id":553163,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Sat Jan 13 16:00:46 EET 2001","creator":"ian@hixie.ch","author":"ian@hixie.ch","time":"Sat Jan 13 16:00:46 EET 2001","text":"pavlov, fyi","id":563417,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Jan 18 20:01:25 EET 2001","creator":"pavlov@pavlov.net","author":"pavlov@pavlov.net","time":"Thu Jan 18 20:01:25 EET 2001","text":"i should probably take this bug, since i've already done this as part of the new imagelib work.","id":568655,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Jan 18 21:24:31 EET 2001","creator":"dcone@formerly-netscape.com.tld","author":"dcone@formerly-netscape.com.tld","time":"Thu Jan 18 21:24:31 EET 2001","text":"You can take this Pavlov","id":568800,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Apr 09 19:23:46 EEST 2001","creator":"pavlov@pavlov.net","author":"pavlov@pavlov.net","time":"Mon Apr 09 19:23:46 EEST 2001","text":"This is partially fixed.. moving to future to get off my immediate radar.","id":665453,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Apr 25 23:19:29 EEST 2002","creator":"pavlov@pavlov.net","author":"pavlov@pavlov.net","time":"Thu Apr 25 23:19:29 EEST 2002","text":"Moving bugs to new Image: GFX component","id":1306057,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Sep 25 13:26:52 EEST 2002","creator":"stmoebius@gmx.de","author":"stmoebius@gmx.de","time":"Wed Sep 25 13:26:52 EEST 2002","text":"Pretty ol' bug eh? Still valid? ;-)","id":1560091,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Nov 08 04:08:11 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Fri Nov 08 04:08:11 EET 2002","text":"It looks still valid.  I might take this.  I'm currently looking into combining gfxIImageFrame and nsIImage.  gfxIImageFrame already has an IDL.","id":1626012,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Nov 13 09:30:47 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Wed Nov 13 09:30:47 EET 2002","text":"I don't think stuart will mind if I reassign this bug to me. ;)","id":1633130,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Nov 13 09:41:21 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Wed Nov 13 09:41:21 EET 2002","text":"reassigning for real this time","id":1633140,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Nov 13 19:55:42 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Wed Nov 13 19:55:42 EET 2002","text":"(This comment is really for my own reference, however, it might prove usefull to reviewers/people interested in this bug)  Here's a list of classes that inherit from nsIImage http://lxr.mozilla.org/seamonkey/search?string=public+nsIImage%5B%5Ea-z%5D&regexp=on  All of them except the mozilla/gfx2/ one need/will be updated.  Unlucky for me, most of nsIImage functions did not return nsresults.  Here's the list of files using nsIImage: http://lxr.mozilla.org/seamonkey/ident?i=nsIImage 69 referenced files, 11 of which are gfx2 and can be ignored.  ","id":1633809,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Nov 13 21:54:10 EET 2002","creator":"pavlov@pavlov.net","author":"pavlov@pavlov.net","time":"Wed Nov 13 21:54:10 EET 2002","text":"this bug should be marked WONTFIX.  nsIImage isn't public.  gfxIImageFrame is XPCOMized and should be used far before nsIImage.  The only reason I left it open is cause I liked  having a 3 digit bug number :-)","id":1634031,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Nov 13 22:05:09 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Wed Nov 13 22:05:09 EET 2002","text":"but I want to combine nsIImage and gfxIImageFrame.  There's no need for both of them.. a lot of the gfxIImageframe functions just call nsIImage.  Here's my proposed plan: 1) XPCOMize nsIImage, create nsImage, and have nsImage* inherit from nsImage. 2) Move exact-same-code functions from nsImage* to nsImage. 3) Combine nsIImage and gfxIImageFrame.  Move gfxImageFrame into nsImage.  thoughts?","id":1634057,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Nov 13 22:34:14 EET 2002","creator":"dcone@formerly-netscape.com.tld","author":"dcone@formerly-netscape.com.tld","time":"Wed Nov 13 22:34:14 EET 2002","text":"I agree with Pavlov.. or at least we need to have a reason .. a good reason to do this.  What would doing this buy us?  What are the risks?  ","id":1634111,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Nov 13 22:43:58 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Wed Nov 13 22:43:58 EET 2002","text":"What's gained:  - code consolidation.  How often have we added something to nsImageWin and then have to add almost the exact same code to nsImageGTK?  How often have we made a function in gfxIImageFrame which calls nsImage* to do the task?  Quite often judging by the code.  - Easier to understand.  Having nsIImageWin and gfxIImageFrame just adds confusion to a new mozilla hacker.  I can't think of any risks at the moment, but I'd love to hear some.","id":1634130,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Nov 14 00:01:10 EET 2002","creator":"pavlov@pavlov.net","author":"pavlov@pavlov.net","time":"Thu Nov 14 00:01:10 EET 2002","text":"it would be far easier to take the code from nsImage* and make a gfxImageFrame impl with it.. then it could be done incrementally.  still, there have got to be more important things to do than this.","id":1634332,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Nov 14 01:08:36 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Thu Nov 14 01:08:36 EET 2002","text":"aah, I'm beginning to see the light now.  nsIImage is still not needed, so this bug is now the \"eliminate nsIImage\" bug.  Similar nsIImage* code can go into gfxImageFrame.  nsImage* can inherit from gfxImageFrame.  We could even rename nsImage* to gfxImageFrame* (ie nsImageWin to gfxImageFrameWin), but as stuart mentioned on IRC, renaming stuff sucks.","id":1634476,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Nov 14 03:43:27 EET 2002","creator":"dcone@formerly-netscape.com.tld","author":"dcone@formerly-netscape.com.tld","time":"Thu Nov 14 03:43:27 EET 2002","text":"I totally don't agree with eliminating nsIImage..   nsIImage encapulates an image/bitmap.. I am sure that the gfxImageFrame encapulates something else. ","id":1634638,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Nov 14 05:37:36 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Thu Nov 14 05:37:36 EET 2002","text":"gfxImageFrame encapsulates nsIImage and adds a (x,y) offset.  gfxImageFrame contains a nsCOMPtr to one nsIImage, and almost every function inside gfxImageFrame calls that nsIImage to get it's work done.  Perhaps a better summary is in order: Combined nsImage* & gfxImageFrame                                        +----------+                                        |nsImageGTK|                                      _ +----------+                                      /| +--------------+    +-------------+ /  +----------+ |gfxIImageFrame| -> |gfxImageFrame| -> |nsImageWin| +--------------+    +-------------+ \\  +----------+                                     _\\|                                        +---------------+                                        |nsImageWhatever|                                        +---------------+  Platform independent code in nsImage* would be moved to gfxImageFrame.  Things like GetWidth, GetHeight, DecodedRect, GetBytesPix, etc.  All the platform dependent code would stay in nsImage*.  Any calls/references to nsIImage would be changed to gfxImageFrame.","id":1634715,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Nov 14 14:25:41 EET 2002","creator":"dcone@formerly-netscape.com.tld","author":"dcone@formerly-netscape.com.tld","time":"Thu Nov 14 14:25:41 EET 2002","text":"I don't like combining those two.. at all.  gfxImageFrame does frame things and nsImage handles bitmaps.  Its not a good place to combine classes.  I really believe that nsImage.. of all classes is named right and does what it supposed to do.  Its intuitive, encapulates what its supposed to..etc.  ","id":1635042,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Sun Nov 17 06:01:16 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Sun Nov 17 06:01:16 EET 2002","text":"dcone, have you looked at gfxImageFrame.cpp?  The only functions that have considerable amount of code are SetImageData and SetAlphaData.. the rest of the functions call nsImage* functions.  Even your patch for Bug 143046 adds a function to gfxIImageFrame, only to have the code return something from nsImageWin.  It's a waste, and makes trying to follow the code harder. gfxIImageFrame was intended to replace nsIImage.  Although I do agree the name gfxIImageFrame is less intuitive than nsIImage, I don't feel I have enough authority to just rename gfxIImageFrame to nsIImage (after the combine).  Some people might get gfxIImageFrame confused with nsIImageFrame.  CCing tor.. I remember him having an interest this bug.  tor, any thought?","id":1638740,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Nov 18 14:28:58 EET 2002","creator":"dcone@formerly-netscape.com.tld","author":"dcone@formerly-netscape.com.tld","time":"Mon Nov 18 14:28:58 EET 2002","text":"There are just a few things I don't like.. but there big things.  1.)  nsImage is for bitmaps/images.  I don't like the idea of having frame in that class at all.  Its just a naming issue.. but I think its a big deal.    2.)  Any frame methods at all in nsImage is wrong.  Its not the number of lines.. its an encapsulation issue.. what are the boundaries of an object.  For me the bottom line is that the current implementation was true to OOD, which makes things easier to follow.  If you have an image problem.. or want to extend and image you know right were to go.  If we have things that need to work cross platform then nsImage needs to have an implementation, but I really dont agree at all with combining them.. I am on the other side.. I think it will make it harder to maintain just because the name of the object that combines both will not describe acurately what each does.  I think I understand what your trying to say.. but its very important to me to have objects names and encapsulation boundaries accurate.","id":1640103,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Nov 18 20:32:13 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Mon Nov 18 20:32:13 EET 2002","text":"Well, at least we do not have totally different views here. :)  Would this be to more of your liking?                             +----------+                            |nsImageGTK|                          _ +----------+                          /| +--------+    +-------+ /  +----------+ |nsIImage| -> |nsImage| -> |nsImageWin| +--------+    +-------+ \\  +----------+                         _\\|                            +---------------+                            |nsImageWhatever|                            +---------------+  This is very similar looking to what we have now, with the exception of nsIImage having 2 additional variables.. x and y.  Does it make sense that an image can be set to a position?   We do not need a whole class just to store x and y.  It's over abstraction. It's like making a class for image without alpha layers and a seperate class class for images with alpha layers.  Why do alpha layers belong in an image?  Because opacity is part of an image.. just like where the image is located (x, y) is also a part of the image.","id":1640719,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Sat Nov 23 09:29:43 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Sat Nov 23 09:29:43 EET 2002","text":"I used \"platform code\" and \"nsImage*\" interchangably in this comment.  nsImage* refers to all the classes that inherited from nsIImage (nsImageWin, nsImageGTK, nsImageMac, to name a few).  Patches will be attached once I get them tested on GTK and OS2.  :) Here is the list of changes:  1) removed nsIImage.h, all references to the file have been removed, and all references to nsIImage class have been changed to gfxIImageFrame ---------- 2) removed \"@mozilla.org/gfx/image/frame;2\" and \"@mozilla.org/gfx/image;1\".  Added \"@mozilla.org/gfx/imageframe;1\" and gave it the CID of GFX_IMAGEFRAME_CID.  Is this okay, or should I assign a totally new CID?  My thinking is that technically it's still the same class (gfxIImageFrame), with some functions from nsIImage moved into it.  The only thing that changed is the @mozilla.org ID-name thing. ---------- 3) Made nsImage* inherit from nsImageFrame (which inherits from nsIImageFrame which is an IDL).  See Comment #29 for nice piccy. ---------- 4) replaced nsImage*::width, nsImage*::height, gfxImageFrame::mOffset, and gfxImageFrame::mSize with gfxImageFrame::mBounds. ---------- 5) All platforms had some variables in common.  These variable were moved to gfxImageFrame as protected and are as follows:      mRowBytes         Still set by platform code       mAlphaRowBytes    Still set by platform code      (mARowBytes)       mBytesPerPixel    Set in gfxImageFrame::Init(). Removed setting variable      (mNumBytesPixel)  from GTK, Mac, Win, BeOS, Photon, and XLib. OS2 never                        had one (and set GetBytesPix incorrectly ;).  QT forces                        mBytesPerPixel to 4.       mAlphaWidth       Set to image width & height if mFormat said there was      mAlphaHeight      an Alpha.  Otherwise 0.       mAlphaDepth       Set in gfxImageFrame::Init() based on mFormat       mIsOptimized      Defaults to false.  A couple of platforms are always      (mOptimized)      optimized, so they override in their init to PR_TRUE.                        The rest set it when the image actually gets optimized                        (if at all)       mIsTopToBottom    I only saw one function using this.. the rest used                        \"#if defined(XP_WIN) || defined(XP_OS2)\" to determine                        how the image was stored.  Defaults to PR_TRUE in                        gfxImageFrame constructor.. Windows and OS2 change it                        to PR_FALSE in Init() ---------- 6) The following were moved from nsIImage to gfxIImageFrame. Names below are after xpidl makes the header file:      GetImageBytesPix was nsIImage::GetBytesPix       GetBitInfo       now returns length of BitInfo as well as the pointer       GetHasAlphaMask  gfxImageFrame returns true if mAlphaDepth > 0.                       Platforms overide with a null check to their private                       AlphaBits.       GetAlphaDepth       drawToImage      nsIImage had two draw functions. IDL doesn't support      draw             overloading, so one was renamed to DrawScaled.  In alot      drawScaled       of platforms, draw() just called drawScaled, so that's      drawTile         what gfxImageFrame::draw does.  GTK, BeOS, Photon, QT,                       and Xlib all override draw().  Everyone (must) overide                       drawToImage, drawScaled, and drawTile.  Although in the                       future, we should implement a generic                       gfxImageFrame::DrawToImage.  GTK, Windows, and other                       platforms use almost the same DrawToImage code.                       gfxIImageFrame had a function called drawTo.  This was                       renamed to the more descriptive drawToImage.       ImageUpdated     Code calling ImageUpdated was changed so it didn't                       need to use nsIInterfaceRequestor to get nsIImage                       from gfxImageFrame.                       Moved the SetDecodedRect call from SetImageData to here                       and made ever nsImage* call gfxImageFrame::ImageUpdate       SetDecodedRect   This really should be removed (in another bug).. I                       think ImageUpdated should be doing the decoded                       variable(s) setting ---------- 7) The following functions (below) were moved to gfxImageFrame as protected.  This means no external classes/code called them.  They can be IDL'd later (when something actually uses them..) or deleted.      IsOptimized      Optimize           SetMutable calls optimize       GetBits            mainly used by GetImageData       GetAlphaBits       mainly used by GetAlphaData       GetAlphaWidth      Neither are currently used      GetAlphaHeight       Set/GetAlphaLevel  Not used or implemented at all.  A few platforms store                         this to mAlphaLevel, but never use it.  I was very                         tempted to remove the functions all together.       GetDecoded[XY][12] Currently not used at all.  We should move to a nsRect                         structure like nsImageOS2 does anyway.       GetIsRowOrderTopToBottom       GetColorMap        Was only used by Windows' nsImageClipboard.  I see no                         evidence that the nsImageClipboard is used (or works),                         so I replaced it with something I think would work                         equally as well (and doesn't use GetColorMap) ---------- 8) The following functions from nsIImage were removed:      GetNaturalWidth    \\      SetNaturalWidth     |__ Removed variables too.  See Bug 116649      GetNaturalHeight    |      SetNaturalHeight   /       GetLineStride       gfxIImageFrame already had GetImageBytesPerRow      GetAlphaLineStride      \"             \"     \"  GetAlphaBytesPerRow       UnlockImagePixels   These two functions locked either Alpha or Data      LockImagePixels     depending on the passed in flag.  gfxIImageFrame                          already had LockImageData, LockAlphaData,                          UnlockImageData, UnlockAlphaData, so both nsImage*                          functions were split into two and renamed.                          Several platforms don't lock alpha/image pixels so                          gfxImageFrame::(Un)LockImagePixels just returns NS_OK                          (the other platforms override with (un)locking) ---------- 9) nsIInterfaceRequestor removed from gfxIImageFrame.  From what I can tell, it was only used to request the nsIImage stored inside gfxImageFrame. ---------- 10) nsRenderingContextImpl::DrawImage and nsRenderingContextImpl::DrawScaledImage would convert the src and dst coords so that they are relative to the image data.  For example, if an imageframe started at (10,10) and we needed to draw starting at (15,15), 10 was stripped from sr.x and sr.y, leaving (5,5) into the image data.   This functionality has been moved to gfxImageFrame as SetRelativeToImageData(), and is called upon nsImage*::Draw() and nsImage*::DrawScaled. ","id":1648263,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Sat Nov 23 09:37:01 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Sat Nov 23 09:37:01 EET 2002","text":"erk. Regarding Comment 3 That's gfxImageFrame, not nsImageFrame ","id":1648266,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Sat Nov 23 10:28:03 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Sat Nov 23 10:28:03 EET 2002","text":"Stuart has some major gripes.. changing target milestone (again :P).  The gripes I remember are:  1) move draw* stuff to nsRenderingContext*  2) Get rid of decoded rect stuff.  Layout should be doing that.  Write code in layout to remember decoded sections.","id":1648277,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Sat Nov 23 15:04:04 EET 2002","creator":"dcone@formerly-netscape.com.tld","author":"dcone@formerly-netscape.com.tld","time":"Sat Nov 23 15:04:04 EET 2002","text":"I totally disagree with that plan.. your plan in 33 was acceptable.. I dont like at all moving anything from nsIImage into gfxIImageFrame or anything that has the word frame on it.  The image stuff should stay image.. it has nothing to do with frames. I will fight tooth and nail not to let happen what your proposing.. its just plain and simply wrong.  I CANT STRESS THAT ENOUGH!!!!!  Also.. I am trying to get in some GIF changes. so messing around in this area will be a major nightmare.  If you feel the need to do something.. and you have some reasons for doing it .. then do what you propose in comment 33.  But Do not re-distribute or change nsIImage.. that is a bitmap class.... PLEASE. ","id":1648369,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Sun Nov 24 04:27:38 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Sun Nov 24 04:27:38 EET 2002","text":"don't worry, this bug is far from being resolved.  I want to clean up nsIImage's stucture first.  That's structure, not really code, nor combining classes.  I'll be filing other bugs for that, and this one will probably have no action for a while (re: long time). I'll be sure to cc you, dcone.  One thing that hasn't changed though, is that I still believe it's silly to have all those calls in gfxIImageFrame just calling nsImage*.","id":1648948,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Nov 29 09:06:10 EET 2002","creator":"alecf@flett.org","author":"alecf@flett.org","time":"Fri Nov 29 09:06:10 EET 2002","text":"As far as \"not having a reason\": These are some perfectly legitimate reasons to schedule the landing of such a fix among other fixes that touch this same code, in loose order of importance: - code size reduction (includes reducing code duplication) - performance improvement - reduced dependencies - refactoring that makes the code easier to understand and maintain  This bug seems to be driven by at least a few of these reasons, and I think we should do what we can to fix this the right way (And that means dcone and stuart/paper coming to an agreement) - there's no need for drama but if we reach an impasse over specific parts of the proposed changes, then we need to bring the plan before the layout module owners and the super-reviewers, to decide what the best course of action is.","id":1655656,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Nov 29 16:20:24 EET 2002","creator":"paper@animecity.nu","author":"paper@animecity.nu","time":"Fri Nov 29 16:20:24 EET 2002","text":"Fortunately, a lot of the work can be done without (hopefully) touching the differences of opinion over this bug.  I've created Bug 181695 and Bug 182658, and I think there will be less issues with them. :)  There's also Bug 181917, which isn't directly decending from this bug, but still may be relative to people CC'd here.","id":1655962,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Mar 31 03:56:01 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Tue Mar 31 03:56:01 EEST 2009","text":"I'm currently working on this.","id":4039038,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Jun 18 00:19:24 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":383823,"time":"Thu Jun 18 00:19:24 EEST 2009","text":"Created attachment 383823 create imgFrame, a combination of nsThebesImage and gfxImageFrame (v0)  This is not complete yet (most of Gecko is not converted), but libpr0n compiles and links.  Basically, we want to disallow access to individual frames as the frames themselves, and instead add accessors to imgContainer for the relevant bits. This ensures that nobody has to worry about frames being a different size from the image, and also disallows access to the bits of an image from outside imagelib (modulo making a separate copy in a gfxImageSurface, which will be offered as the solution). This lets us keep images optimized, and stops the silly LockImagePixels usage that nobody should need.  My #1 concern, and the reason for my sr request right now, is the imgContainer API: how it looks, how it feels, and whether it's okay to make a bunch of stuff C++-only. I suspect it is, but I want to defer to people smarter & more experienced than myself.  Incidentally:  40 files changed, 1589 insertions(+), 2503 deletions(-)","id":4157631,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jun 19 19:07:20 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":384137,"time":"Fri Jun 19 19:07:20 EEST 2009","text":"Created attachment 384137 imgFrame patch v0.1  This patch removes all remaining references to nsIImage and gfxIImageFrame. libpr0n still compiles, but I haven't tried compiling anything else.   90 files changed, 1866 insertions(+), 3032 deletions(-)","id":4160424,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jun 19 19:17:36 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Fri Jun 19 19:17:36 EEST 2009","text":"*** Bug 467112 has been marked as a duplicate of this bug. ***","id":4160444,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jun 22 22:48:00 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":384515,"time":"Mon Jun 22 22:48:00 EEST 2009","text":"Created attachment 384515 imgFrame patch v1  This patch compiles on OS X. (It crashes on startup.) I've sent it to the try server for compiles on other operating systems.  At this point, I'd like super-review of the API-level changes from Vlad, and, if possible, the changes in each individual's area (svg, layout, content, etc). Most of the changes in the users of imagelib are somewhat mechanical, but it's possible I've messed things up right good.  My main concern with regard to API change is the fact that I've removed Javascript users' access to raw image data - nsIImage and gfxIImageFrame are gone, and imgIContainer exposes gfxASurface and gfxImageSurface to noscript callers only. (I don't think we actually had users of that raw image data, but it's something to keep in mind.)","id":4163790,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jun 22 22:57:09 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":384515,"time":"Mon Jun 22 22:57:09 EEST 2009","text":"Comment on attachment 384515 imgFrame patch v1  surely there are some people who work on platform not r? on this bug.","id":4163803,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jun 22 23:33:14 EEST 2009","creator":"vladimir@pobox.com","author":"vladimir@pobox.com","attachment_id":384515,"time":"Mon Jun 22 23:33:14 EEST 2009","text":"Comment on attachment 384515 imgFrame patch v1  on file: modules/libpr0n/public/imgIContainer.idl line 72 > interface imgIContainer : nsISupports  is imgIContainer still the right name for this?   on file: modules/libpr0n/public/imgIContainer.idl line 117 >   [noscript] imgIContainer extractCurrentFrame([const] in nsIntRect aRegion);  extractCurrentFrame is only used by border-image, apparently because it wants to use the layout helpers which need an imgIContainer.  Would be nice to be able to remove this function -or- to at least consolidate it with the other getters (see below).  Also, the argument is an nsIntRect; change the param to aRect, not aRegion.   on file: modules/libpr0n/public/imgIContainer.idl line 139 >   [noscript] void getCurrentFrameRect(in nsIntRect rect);  It seems a lot of the APIs operate either on an arbitrary frame N or the current frame.  If we want to have both, I'd suggest that they mirror eachother exactly; that is, have both a getCurrentFrameRect and a getFrameRect(n).  Another (potentially cleaner) option is to have a getFrameContainer(n) that would return a new imgIContainer for frame N, but would share data with the main/parent container.    on file: modules/libpr0n/public/imgIContainer.idl line 172 >   [noscript] readonly attribute gfxImageSurface currentFrame;  This is a readonly attribute, whereas the very similar getCurrentFrameSurface() below is a function.  Should probably pick one or the other.   on file: modules/libpr0n/public/imgIContainer.idl line 178 >   [noscript] gfxASurface getCurrentFrameSurface();  There are 4 different getters here:  imgIContainer extractCurrentFrame(nsIntRect r); gfxImageSurface getFrame(uint num); gfxImageSurface getCurrentFrame(); gfxASurface getCurrentFrameSurface();  It seems like these could be consolidated.  I mentioned extractCurrentFrame above; might be able to get rid of it entirely.  For the others, I would suggest having everything return gfxASurface, and have callers pass a flag saying whether they want an image surface or would be ok with a platform-native surface.  Also, a flag could be passed that indicates whether the caller wants a surface it can modify, or whether a read-only (shared) surface is fine.  That would get us down to 2 API calls, a getCurrentFrame and getFrame(int n).  At that point, getCurrentFrame becomes a convenience function, since we can already grab the right index from currentFrameIndex.  Is it worth having that convenience function around?  I'd say yes, since 90% of the time it's what you want, but it would be a smaller API surface to not have it.","id":4163884,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jun 22 23:45:16 EEST 2009","creator":"roc@ocallahan.org","author":"roc@ocallahan.org","time":"Mon Jun 22 23:45:16 EEST 2009","text":"Some comments on imgIContainer.idl. Generally I like it.  I think '* @see \"gfx2\"' can go.  imgIContainer needs a big fat comment explaining exactly what an imgIContainer represents. People need to understand what the difference is between an \"image\" and an \"image container\". Or maybe it should just be called nsIImage and lose the \"Container\"... or heck, even mozilla::IImage?  Do the frame-combining constants at the start of imgIContainer really need to be exposed?  +   * Whether the current frame needs the background painted behind it. +   */ +  readonly attribute boolean currentFrameNeedsBackground;  Wouldn't isOpaque be more obvious?  Can we make imgIContainer non-scriptable? That would make it easier for C++ users to use.  +  [noscript] void getCurrentFrameRect(in nsIntRect rect); +  unsigned long getFrameImageDataLength(in unsigned long framenumber); +  void getFrameColormap(in unsigned long framenumber,  +                        [array, size_is(paletteLength)] out PRUint8 paletteData, +                        out unsigned long paletteLength); +  void setFrameDisposalMethod(in unsigned long framenumber, in PRInt32 aDisposalMethod); +  void setFrameBlendMethod(in unsigned long framenumber, in PRInt32 aBlendMethod); +  void setFrameTimeout(in unsigned long framenumber, in PRInt32 aTimeout); +  void setFrameHasNoAlpha(in unsigned long framenumber); +  [noscript] void ensureCleanFrame(in unsigned long aFramenum, in PRInt32 aX, in PRInt32 aY, in PRInt32 aWidth, in PRInt32 aHeight, in gfxImageFormat aFormat, +                                   [array, size_is(imageLength)] out PRUint8 imageData, out unsigned long imageLength); +  [noscript] void appendFrame(in PRInt32 aX, in PRInt32 aY, in PRInt32 aWidth, in PRInt32 aHeight, in gfxImageFormat aFormat, +                              [array, size_is(imageLength)] out PRUint8 imageData, out unsigned long imageLength); +  [noscript] void appendPalettedFrame(in PRInt32 aX, in PRInt32 aY, in PRInt32 aWidth, in PRInt32 aHeight, in gfxImageFormat aFormat, in PRUint8 aPaletteDepth,  +                                      [array, size_is(imageLength)] out PRUint8 imageData, out unsigned long imageLength, +                                      [array, size_is(paletteLength)] out PRUint8 paletteData, out unsigned long paletteLength); +  [noscript] void frameUpdated(in unsigned long framenum, in nsIntRect aNewRect);    void endFrameDecode(in unsigned long framenumber);    void decodingComplete();   [noscript] void setDiscardable(in string aMimeType);   [noscript] void addRestoreData([array, size_is(aCount), const] in char data,                                  in unsigned long aCount);   [noscript] void restoreDataDone();  Can we avoid exposing these? Looks like only imglib uses them, and outsiders shouldn't be using them. I think it's probably worth having an abstract interface that clients use and a concrete subclass that imglib uses. init() should move to the concrete class too. It's actually quite important we ensure that outsiders don't try to get the frame count, for example, since we'll be able to have animated SVG images that don't actually have a frame count.  At the very least, the methods that outsiders use should be clearly separated in the IDL and documentation.    attribute unsigned short animationMode;   void startAnimation();   void stopAnimation();   void resetAnimation();   attribute long loopCount;  There must be some redundancy here. Seems like at least we could get rid of animationMode and rename loopCount to animationCount; then animationCount==0 would mean no animation, animationCount==1 would mean just 1 cycle and then stop, animationCount==INT32_MAX would mean unlimited cycles. Fodder for another bug perhaps.  +  [noscript] readonly attribute gfxImageSurface currentFrame; +  [noscript] gfxASurface getCurrentFrameSurface();  Echoing Vlad, I don't know why we need to have both currentFrame and getCurrentFrameSurface. Shouldn't getCurrentFrameSurface be enough? If someone needs a gfxImageSurface they can check the type of the surface returned by getCurrentFrameSurface; if it's not a gfxImageSurface already, they can copy the gfxASurface to a gfxImageSurface manually. That's hardly any code, and if they don't need to optimize for the already-gfxImageSurface case, it's even less code. I don't think Vlad's flag idea is necessary, but I wouldn't object.  +  [noscript] gfxImageSurface getFrame(in unsigned long framenumber);  I'd quite like to change this since it's going to be a problem for animated SVG images, which don't have numbered frames. It looks like all current users are either getting frame 0 or the last decoded frame. So how about   gfxASurface getFirstFrameSurface();   gfxASurface getLastFrameSurface(); ?  I would like to keep extractCurrentFrame, since it lets you get an object representing a subregion without necessarily going through a gfxASurface. For SVG images that could be very useful.","id":4163899,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jun 23 01:11:07 EEST 2009","creator":"bzbarsky@mit.edu","author":"bzbarsky@mit.edu","time":"Tue Jun 23 01:11:07 EEST 2009","text":"> I don't think we actually had users of that raw image data  We sure do: extensions.  At least last I checked.  They might be able to move to <canvas> imagedata, especially if we expose a way for them to draw the objects involved into a canvas...  But worth checking AMO for such extensions and looking into exactly what they're doing.","id":4164010,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jun 23 04:15:09 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Tue Jun 23 04:15:09 EEST 2009","text":"Mark Finkle used the AMO source code search and found that there are no users of gfxIImageFrame::getImageData, which is good news - everyone already uses canvas, it seems.","id":4164159,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jun 23 18:15:47 EEST 2009","creator":"mook@songbirdnest.com","author":"mook@songbirdnest.com","time":"Tue Jun 23 18:15:47 EEST 2009","text":"(In reply to comment #50) > Mark Finkle used the AMO source code search and found that there are no users > of gfxIImageFrame::getImageData, which is good news - everyone already uses > canvas, it seems.  Note that the AMO source code search would only hit JS source, not C++ in extensions.  joe suggested that C++-based extensions move to use gfxImageSurface instead, if I remember correctly - and I probably don't.  <canvas> can't be used from any language other than JS.  I have no idea how frozen gfxImageSurface is, given that it's not IDL.  If this is as \"frozen\" as nsIFrame (i.e. not at all), this may mean there will be future crashes.","id":4165279,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jun 23 18:22:15 EEST 2009","creator":"dolske@mozilla.com","author":"dolske@mozilla.com","time":"Tue Jun 23 18:22:15 EEST 2009","text":"Given bug 315357, I would hope there are no JS callers.","id":4165295,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jun 24 12:27:23 EEST 2009","creator":"bobbyholley@gmail.com","author":"bobbyholley@gmail.com","time":"Wed Jun 24 12:27:23 EEST 2009","text":"this patch is pretty bitrotted in the places where it touches other code (I get lots of rejections based on june commits by roc and dbaron). Any chance of merging the conflicts and posting one that applies cleanly?","id":4166571,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jun 24 16:13:18 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":384890,"time":"Wed Jun 24 16:13:18 EEST 2009","text":"Created attachment 384890 updated to tip  This is an updated-to-tip, slightly-fixed version of this patch. (PNGs don't display, but GIFs do!)","id":4166907,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jun 24 16:27:05 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":384895,"time":"Wed Jun 24 16:27:05 EEST 2009","text":"Created attachment 384895 updated to tip redux  Whoops, hg qclone didn't do what I wanted it to. This is a more up-to-date patch including fixes to gifs not decoding, etc.","id":4166937,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jun 26 17:19:54 EEST 2009","creator":"bobbyholley@gmail.com","author":"bobbyholley@gmail.com","time":"Fri Jun 26 17:19:54 EEST 2009","text":"I'm building my decode-on-draw patch on top of this one, and I've run into issues with ExtractCurrentFrame. It seems wrong to me, because this is the only case where we create an imgContainer for something that didn't come from a source image (jpg, png, gif, etc). I'm trying to associate a meaningful mimetype and decoder with each imgContainer, so this case sticks out.   What's more, this function really _wants_ to return an imgFrame, not an imgContainer. Currently, the only use case is border-image, where essentially we extract this imgContainer, hold onto it for a while, and then call Draw() on it, which in turn just pulls the imgFrame back out and calls Draw() on the frame. So more or less it's just boxing/unboxing.  I'm not positive (I'm still relatively new to XPCOM), but my impression is that the reasoning here is that we have no imgIFrame interface, and we only want to return interfaces in idl specifications. If this is true, and if we agree with roc that we want a way to get image frames without using gfxASurface, maybe it's worth considering making an imgIFrame (certainly with less stuff than the gfxImageFrame that we're eliminating with this patch).  thoughts?","id":4170700,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jun 26 22:17:15 EEST 2009","creator":"roc@ocallahan.org","author":"roc@ocallahan.org","time":"Fri Jun 26 22:17:15 EEST 2009","text":"I wouldn't want to expose imgIFrame just for this one case. That adds complexity for image users. Having an Extract operation that returns the same type of object is nice in layout because it means all our image-drawing helpers only need to have one kind of signature.  To implement this, you could have a single completely different imgIContainer implementation that points to the original imgIContainer and contains the slice coordinates. Its draw() method would delegate to the original draw() method appropriately. That would work, and could be better optimized if we feel the need. How does that sound?","id":4171326,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jun 26 22:36:29 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":385492,"time":"Fri Jun 26 22:36:29 EEST 2009","text":"Created attachment 385492 updated to tip, PNGs work  This patch is updated to tip. PNGs and JPEGs both work, and GIF non-animations work. Unfortunately there's still a bug in paletted GIF animations - it looks like we're either sampling the wrong part of the palette, or we've got the wrong palette on each frame, I'm not sure which.","id":4171359,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 01 00:02:54 EEST 2009","creator":"bzbarsky@mit.edu","author":"bzbarsky@mit.edu","time":"Wed Jul 01 00:02:54 EEST 2009","text":"So... unless you want everyone on the reviewer list to review the whole patch, it might be nice to say which one is supposed to review what.","id":4177084,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 01 00:41:58 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Wed Jul 01 00:41:58 EEST 2009","text":"I just want an initial check-for-sanity from the reviewers, not a full review yet.  bzbarsky: content jwatt: svg roc: layout jmathies: win32 bits karlt: gtk bits  And, if it interests any of you, a check-for-sanity on the imgIContainer interface changes, as roc and vlad did above.","id":4177158,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 01 03:11:56 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":385492,"time":"Wed Jul 01 03:11:56 EEST 2009","text":"Comment on attachment 385492 updated to tip, PNGs work  Suspect karl meant to put this here:   win32 and mac clipboards seem to use the current frame, but gtk seems to use the initial frame. Can gtk be made consistent with the others? (If nsImageToPixbuf::PatternToPixbuf() is still no longer needed then that can be removed.)","id":4177319,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Jul 02 21:57:05 EEST 2009","creator":"tellrob@gmail.com","author":"tellrob@gmail.com","attachment_id":386605,"time":"Thu Jul 02 21:57:05 EEST 2009","text":"Created attachment 386605 Compiles on windows  Haven't run tests but this will compile and the browser runs and looks ok.","id":4181202,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jul 03 04:04:40 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":386671,"time":"Fri Jul 03 04:04:40 EEST 2009","text":"Created attachment 386671 updated to tip, integrate robarnold's changes, GIFs work  The previous patches reflected a fundamental misunderstanding on my part of what datatype a palette/colormap should be stored as, and it turns out that fixing that fixes my GIF animation problems too.  This patch also integrates Rob Arnold's changes (I believe all of them - had some interdiff problems, so please check) to make it compile on Windows and be updated to tip.","id":4181724,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 07 22:28:53 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":387311,"time":"Tue Jul 07 22:28:53 EEST 2009","text":"Created attachment 387311 Fix imgITools xpcshell test","id":4187917,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Jul 09 22:08:52 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":387745,"time":"Thu Jul 09 22:08:52 EEST 2009","text":"Created attachment 387745 fixed drawing images to canvas and border-image; merged to m-c  This patch is currently making its way through the try server.","id":4191668,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jul 10 21:28:35 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":387949,"time":"Fri Jul 10 21:28:35 EEST 2009","text":"Created attachment 387949 fix icon files not having an alpha channel; fix some compilation errors  This is very close. Still remaining are any further build failures (currently running through the try server) and updating for reviewers' comments earlier.  I will be splitting this into quite a number of patches for the purposes of review.","id":4193158,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jul 10 21:29:22 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Fri Jul 10 21:29:22 EEST 2009","text":"Oh, also, all our tests pass now, at least on OS X.","id":4193160,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jul 13 03:17:50 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388181,"time":"Mon Jul 13 03:17:50 EEST 2009","text":"Created attachment 388181 fix SVG image reftest; fix compilation on Linux  This patch is updated to tip again. It also fixes an SVG image scaling reftest and compilation on Linux. Currently pushed to try.","id":4194944,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jul 13 22:32:19 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Mon Jul 13 22:32:19 EEST 2009","text":"(In reply to comment #47) > (From update of attachment 384515 [details]) > on file: modules/libpr0n/public/imgIContainer.idl line 72 > > interface imgIContainer : nsISupports >  > is imgIContainer still the right name for this?  No; bug 503973 will track the changes required to split imgIContainer into two separate interfaces, the non-libpr0n version should probably be called mozilla::Image. (Does xpidl support namespaces?)  (In reply to comment #48) > Can we make imgIContainer non-scriptable? That would make it easier for C++ > users to use.  No, because imgITools uses it.   > At the very least, the methods that outsiders use should be clearly separated > in the IDL and documentation.  Agreed; I'll do this in this bug, and the rest of the changes in bug 503973.   >   attribute unsigned short animationMode; >   void startAnimation(); >   void stopAnimation(); >   void resetAnimation(); >   attribute long loopCount; >  > There must be some redundancy here. Seems like at least we could get rid of > animationMode and rename loopCount to animationCount; then animationCount==0 > would mean no animation, animationCount==1 would mean just 1 cycle and then > stop, animationCount==INT32_MAX would mean unlimited cycles. Fodder for another > bug perhaps.  Yeah, please file another bug.   > +  [noscript] readonly attribute gfxImageSurface currentFrame; > +  [noscript] gfxASurface getCurrentFrameSurface(); >  > Echoing Vlad, I don't know why we need to have both currentFrame and > getCurrentFrameSurface. Shouldn't getCurrentFrameSurface be enough? If someone > needs a gfxImageSurface they can check the type of the surface returned by > getCurrentFrameSurface; if it's not a gfxImageSurface already, they can copy > the gfxASurface to a gfxImageSurface manually. That's hardly any code, and if > they don't need to optimize for the already-gfxImageSurface case, it's even > less code. I don't think Vlad's flag idea is necessary, but I wouldn't object.  I'd prefer Vlad's idea; no need to have boilerplate code converting to gfxImageSurfaces all over the place.  > +  [noscript] gfxImageSurface getFrame(in unsigned long framenumber); >  > I'd quite like to change this since it's going to be a problem for animated SVG > images, which don't have numbered frames. It looks like all current users are > either getting frame 0 or the last decoded frame. So how about >   gfxASurface getFirstFrameSurface(); >   gfxASurface getLastFrameSurface();  Is it going to be easy to get an SVG file's first frame surface? If not, I see no reason why we can't just give consumers current frame only. Most places that want the 0th frame just want \"a\" frame, and IMO current is as good as first.  > I would like to keep extractCurrentFrame, since it lets you get an object > representing a subregion without necessarily going through a gfxASurface. For > SVG images that could be very useful.  extractCurrentFrame is sort of ugly, but necessary for border-image without making a lot of other changes. If we want to get rid of it, I'd prefer","id":4196385,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jul 13 22:46:31 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Mon Jul 13 22:46:31 EEST 2009","text":"Don't know how that got cut off. If we want to get rid of it, I'd prefer someone to file a followup bug on layout, and I'll do the fix in libpr0n.","id":4196425,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 04:35:24 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388406,"time":"Tue Jul 14 04:35:24 EEST 2009","text":"Created attachment 388406 code complete  This patch compiles on Windows, Linux, and OS X, and I believe it also passes all our tests (though I'm running through the try server to be sure). It fixes crashes caused by the gfx module not being initialized by tests that don't explicitly use anything inside the gfx module, and it also implements the API changes asked for by roc and vlad in initial API review.  Please look this over; I will be splitting this patch up into multiple parts for formal review tomorrow.","id":4196905,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 20:16:57 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388529,"time":"Tue Jul 14 20:16:57 EEST 2009","text":"Created attachment 388529 The new API this patch introduces, as well as changes in libpr0n required for it  This is the actual API changes, and the part that needs super-review. I'd like both roc and vlad to SR this, but everyone should take a look to make sure that imgIContainer makes sense for their uses.","id":4198172,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 20:17:28 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388530,"time":"Tue Jul 14 20:17:28 EEST 2009","text":"Created attachment 388530 cocoa widget changes","id":4198173,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 20:18:05 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388531,"time":"Tue Jul 14 20:18:05 EEST 2009","text":"Created attachment 388531 content changes (no svg)","id":4198174,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 20:18:43 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388532,"time":"Tue Jul 14 20:18:43 EEST 2009","text":"Created attachment 388532 layout changes (no SVG)","id":4198176,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 20:19:13 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388534,"time":"Tue Jul 14 20:19:13 EEST 2009","text":"Created attachment 388534 SVG changes (content and layout)","id":4198178,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 20:20:46 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388536,"time":"Tue Jul 14 20:20:46 EEST 2009","text":"Created attachment 388536 changes to image decoders required by changes to imgIContainer API","id":4198187,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 20:22:06 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388537,"time":"Tue Jul 14 20:22:06 EEST 2009","text":"Created attachment 388537 changes to GTK and GNOME-specific widget code","id":4198190,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 20:22:41 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388538,"time":"Tue Jul 14 20:22:41 EEST 2009","text":"Created attachment 388538 Windows widget changes","id":4198192,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 20:24:03 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388539,"time":"Tue Jul 14 20:24:03 EEST 2009","text":"Created attachment 388539 removal of nsIImage and gfxIImage in gfx/","id":4198198,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 20:26:22 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":388540,"time":"Tue Jul 14 20:26:22 EEST 2009","text":"Created attachment 388540 rest of changes required (os2, qt widget changes; libeditor changes; xpwidget changes; build changes)","id":4198208,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 14 21:32:44 EEST 2009","creator":"mark.finkle@gmail.com","author":"mark.finkle@gmail.com","attachment_id":388540,"time":"Tue Jul 14 21:32:44 EEST 2009","text":"Comment on attachment 388540 rest of changes required (os2, qt widget changes; libeditor changes; xpwidget changes; build changes)  Qt part builds and runs fine","id":4198340,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 15 00:10:25 EEST 2009","creator":"roc@ocallahan.org","author":"roc@ocallahan.org","attachment_id":388529,"time":"Wed Jul 15 00:10:25 EEST 2009","text":"Comment on attachment 388529 The new API this patch introduces, as well as changes in libpr0n required for it  +  [noscript] void getCurrentFrameRect(in nsIntRect aFrameRect); +  readonly attribute unsigned long currentFrameIndex; +  readonly attribute unsigned long numFrames;  Shouldn't these be internal-only?  +  /** +   * Get a copy of the current frame that you can write to and otherwise +   * inspect the pixels of. +   */ +  [noscript] gfxImageSurface copyCurrentFrame();  The comment should be clearer that the caller gets exclusive ownership of and access to the surface.","id":4198607,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 15 01:01:16 EEST 2009","creator":"roc@ocallahan.org","author":"roc@ocallahan.org","time":"Wed Jul 15 01:01:16 EEST 2009","text":"+  [noscript] void onDataAvailable(in imgIRequest aRequest, in unsigned long aFrame, [const] in nsIntRect aRect);  Instead of perpetuating public frame indices --- which need to go away --- how about just a boolean aIsCurrentFrame here?","id":4198656,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 15 01:04:09 EEST 2009","creator":"roc@ocallahan.org","author":"roc@ocallahan.org","attachment_id":388532,"time":"Wed Jul 15 01:04:09 EEST 2009","text":"Comment on attachment 388532 layout changes (no SVG)  Looks good, except for the part where we still have to deal with frame indices.","id":4198661,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 15 01:05:38 EEST 2009","creator":"roc@ocallahan.org","author":"roc@ocallahan.org","attachment_id":388540,"time":"Wed Jul 15 01:05:38 EEST 2009","text":"Comment on attachment 388540 rest of changes required (os2, qt widget changes; libeditor changes; xpwidget changes; build changes)  xpwidgets changes are good","id":4198663,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 15 05:30:05 EEST 2009","creator":"jmathies@mozilla.com","author":"jmathies@mozilla.com","attachment_id":388538,"time":"Wed Jul 15 05:30:05 EEST 2009","text":"Comment on attachment 388538 Windows widget changes  win widget changes look good to me.","id":4198928,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 15 06:32:42 EEST 2009","creator":"bzbarsky@mit.edu","author":"bzbarsky@mit.edu","attachment_id":388531,"time":"Wed Jul 15 06:32:42 EEST 2009","text":"Comment on attachment 388531 content changes (no svg)  > +  return imgContainer.forget().get();  That should just be .forget(), without the .get().  With that change, r=bzbarsky.","id":4198977,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 15 18:51:28 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Wed Jul 15 18:51:28 EEST 2009","text":"(In reply to comment #83) > (From update of attachment 388529 [details]) > +  [noscript] void getCurrentFrameRect(in nsIntRect aFrameRect); > +  readonly attribute unsigned long currentFrameIndex; > +  readonly attribute unsigned long numFrames; >  > Shouldn't these be internal-only?  Yes - I will add an external |readonly attribute boolean animated| to handle the current users, which are really just checking for that.  (In reply to comment #84) > +  [noscript] void onDataAvailable(in imgIRequest aRequest, in unsigned long > aFrame, [const] in nsIntRect aRect); >  > Instead of perpetuating public frame indices --- which need to go away --- how > about just a boolean aIsCurrentFrame here?  OK.","id":4199793,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 15 21:04:52 EEST 2009","creator":"mozilla@Weilbacher.org","author":"mozilla@Weilbacher.org","attachment_id":388540,"time":"Wed Jul 15 21:04:52 EEST 2009","text":"Comment on attachment 388540 rest of changes required (os2, qt widget changes; libeditor changes; xpwidget changes; build changes)  Joe, thanks for thinking of the OS/2 code and for the chance to review this.  >-  nsCOMPtr<gfxIImageFrame> frame; >-  aCursor->GetFrameAt(0, getter_AddRefs(frame)); >+  nsRefPtr<imgIContainer> frame; >+  aCursor->CopyCurrentFrame(getter_AddRefs(frame));  This gives me  M:/central/mozilla/widget/src/os2/nsWindow.cpp:1684: error: no matching function for call to 'imgIContainer::CopyCurrentFrame(nsRefPtrGetterAddRefs<imgIContainer>)' ../../../dist/include/imgIContainer.h:99: note: candidates are: virtual nsresult imgIContainer::CopyCurrentFrame(gfxImageSurface**)  Using nsRefPtr<gfxImageSurface> as suggested by the compiler works much better.  >   // if the image is ridiculously large, exit because >   // it will be unrecognizable when shrunk to 32x32 >-  PRInt32 width, height; >-  frame->GetWidth(&width); >-  frame->GetHeight(&height); >+  PRInt32 width = frame->Width(); >+  PRInt32 height = frame->Height();;  Nit: please remove the second semicolon here.  >-HBITMAP nsWindow::CreateTransparencyMask(gfx_format format, >+HBITMAP nsWindow::CreateTransparencyMask(gfxASurface::gfxImageFormat format,  Please adapt the prototype in nsWindow.h accordingly.  Otherwise this seems to work. :-) So r+ me with these changes.","id":4200040,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jul 17 02:57:22 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":389077,"time":"Fri Jul 17 02:57:22 EEST 2009","text":"Created attachment 389077 changes as requested by roc in review (interdiff)","id":4202386,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jul 17 03:01:59 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":389078,"time":"Fri Jul 17 03:01:59 EEST 2009","text":"Created attachment 389078 Full patch including requested changes","id":4202393,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jul 17 04:05:56 EEST 2009","creator":"roc@ocallahan.org","author":"roc@ocallahan.org","time":"Fri Jul 17 04:05:56 EEST 2009","text":"+/* [noscript] void onDataAvailable (in imgIRequest request, in unsigned long frame, [const] in nsIntRect rect); */  NS_IMETHODIMP imgRequest::OnDataAvailable(imgIRequest *request,  You need to fix the type of the second parameter in the comment","id":4202442,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Fri Jul 17 23:27:25 EEST 2009","creator":"jmathies@mozilla.com","author":"jmathies@mozilla.com","time":"Fri Jul 17 23:27:25 EEST 2009","text":"A note for drivers, a number of win7 specific features rely on this, so if possible it would be great if we could get this into 3.6.","id":4203851,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jul 20 00:19:35 EEST 2009","creator":"karlt@mozbugz.karlt.net","author":"karlt@mozbugz.karlt.net","attachment_id":388537,"time":"Mon Jul 20 00:19:35 EEST 2009","text":"Comment on attachment 388537 changes to GTK and GNOME-specific widget code  >- * An interface that allows converting an nsIImage to a GdkPixbuf*. >+ * An interface that allows converting the first frame of an imgIContainer to a GdkPixbuf*.  \"the _current_ frame\" would describe what is currently happening.  >-    return PatternToPixbuf(pattern, width, height);  Please remove the unused PatternToPixbuf method.  >     // Get first image frame >-    nsCOMPtr<gfxIImageFrame> frame; >-    aCursor->GetFrameAt(0, getter_AddRefs(frame)); >-    if (!frame) >-        return NS_ERROR_NOT_AVAILABLE; >- >-    nsCOMPtr<nsIImage> img(do_GetInterface(frame)); >-    if (!img) >-        return NS_ERROR_NOT_AVAILABLE; >- >-    GdkPixbuf* pixbuf = nsImageToPixbuf::ImageToPixbuf(img); >+    GdkPixbuf* pixbuf = nsImageToPixbuf::ImageToPixbuf(aCursor);  Is the current frame likely to be the first frame? If so, please add a comment to explain.  Or, are you changing the behavior because you think the current frame is as good as the first?  If so, the comment needs updating.","id":4205275,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jul 20 00:20:31 EEST 2009","creator":"karlt@mozbugz.karlt.net","author":"karlt@mozbugz.karlt.net","attachment_id":388537,"time":"Mon Jul 20 00:20:31 EEST 2009","text":"Comment on attachment 388537 changes to GTK and GNOME-specific widget code  r+ assuming the comments above are addressed","id":4205276,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jul 20 20:10:05 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":389536,"time":"Mon Jul 20 20:10:05 EEST 2009","text":"Created attachment 389536 Final patch, including all review changes  This patch includes all changes requested by review, and is ready to go.","id":4206591,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jul 20 21:01:53 EEST 2009","creator":"rkawaguchi@mozilla.com","author":"rkawaguchi@mozilla.com","time":"Mon Jul 20 21:01:53 EEST 2009","text":"Hi Joe, I was working on your patch and found a small mistake.  @@ -1682,37 +1680,19 @@ nsCSSRendering::PaintBackgroundWithSC(ns +    PRBool isOpaque; +    if (NS_SUCCEEDED(image->GetCurrentFrameIsOpaque(&isOpaque)) && !isOpaque) +      drawBackgroundColor = PR_TRUE;  This should be:  +    if (NS_SUCCEEDED(image->GetCurrentFrameIsOpaque(&isOpaque)) && isOpaque) +      drawBackgroundColor = PR_FALSE;","id":4206668,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jul 20 23:09:36 EEST 2009","creator":"dholbert@mozilla.com","author":"dholbert@mozilla.com","time":"Mon Jul 20 23:09:36 EEST 2009","text":"Yeah -- to provide a little more code-context, note that the chunk Ryo quotes in comment 98 is inside an \"if( ... && drawBackgroundColor) {\" clause.  So, drawBackgroundColor is already flipped *on* when we hit that code (and we want to flip it *off* as an optimization, if the frame is opaque).","id":4206891,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Mon Jul 20 23:41:29 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","attachment_id":389579,"time":"Mon Jul 20 23:41:29 EEST 2009","text":"Created attachment 389579 small changes  Wow, thanks so much! If you find anything else, please let me know.  This patch is some small changes noticed by others - the mistake Ryo noticed, as well as some code that re-used surfaces if it could, left over from before copyCurrentFrame was explicitly called \"copy.\"","id":4206949,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Tue Jul 21 01:56:09 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Tue Jul 21 01:56:09 EEST 2009","text":"http://hg.mozilla.org/mozilla-central/rev/b94bc4be53ca","id":4207156,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 22 00:40:53 EEST 2009","creator":"t.matsuu@gmail.com","author":"t.matsuu@gmail.com","time":"Wed Jul 22 00:40:53 EEST 2009","text":"We also take care of content/canvas/src/nsCanvasRenderingContextGL.cpp content/canvas/src/nsCanvasRenderingContextGL.h content/canvas/src/nsCanvasRenderingContextGLWeb20.cpp","id":4209184,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 22 05:22:12 EEST 2009","creator":"t.matsuu@gmail.com","author":"t.matsuu@gmail.com","time":"Wed Jul 22 05:22:12 EEST 2009","text":"(In reply to comment #102) Filed to bug 505663.","id":4209635,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 22 07:28:54 EEST 2009","creator":"neil@httl.net","author":"neil@httl.net","attachment_id":389536,"time":"Wed Jul 22 07:28:54 EEST 2009","text":"Comment on attachment 389536 Final patch, including all review changes  >+EXTRA_DSO_LDOPTS += $(LIBXUL_DIST)/lib/$(LIB_PREFIX)thebes.$(LIB_SUFFIX) Are these symbols exported from xul.dll or otherwise accessible from xulrunner?","id":4209782,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 22 18:22:15 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Wed Jul 22 18:22:15 EEST 2009","text":"Yes, Thebes is exported from xul.","id":4210801,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 22 21:28:55 EEST 2009","creator":"wuno@wmeinl.de","author":"wuno@wmeinl.de","time":"Wed Jul 22 21:28:55 EEST 2009","text":"(In reply to comment #100)  > Wow, thanks so much! If you find anything else, please let me know. Joe, the OS/2 build breaks, cause somehow in your final version of the patch you changed in widget/src/os2/nsWindow.cpp 2nd hunk   nsRefPtr<imgIContainer> frame; (in the first version, https://bugzilla.mozilla.org/attachment.cgi?id=388540, that got r+ from peterw) that works and is in all other widget files to   nsRefPtr<gfxImageFrame> frame; which doesn't work as you removed it. Is it possible to fix this typo here or do you want me to file a follow-up bug?","id":4211244,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 22 21:56:53 EEST 2009","creator":"wuno@wmeinl.de","author":"wuno@wmeinl.de","time":"Wed Jul 22 21:56:53 EEST 2009","text":"(In reply to comment #106) > (In reply to comment #100) Ah, from comment #90 it should be nsRefPtr<gfxImageSurface> and not nsRefPtr<gfxImageFrame> and that indeed works. In comment #106 I was a bit to early for pressing commit nsRefPtr<imgIContainer> doesn't compile.","id":4211296,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Wed Jul 22 22:02:57 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Wed Jul 22 22:02:57 EEST 2009","text":"If there remains a problem, please file a followup bug, and I'll fix it. :)","id":4211307,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Jul 23 05:56:01 EEST 2009","creator":"bugzillamozillaorg_serge_20140323@gautherie.fr","author":"bugzillamozillaorg_serge_20140323@gautherie.fr","time":"Thu Jul 23 05:56:01 EEST 2009","text":"\"can't read .../gfx/src/shared/Makefile.in: No such file or directory\"  Please, remove the following line too:  /toolkit/toolkit-makefiles.sh     * line 122 -- gfx/src/shared/Makefile","id":4212004,"bug_id":753,"tags":[]},{"is_private":false,"creation_time":"Thu Jul 23 06:37:19 EEST 2009","creator":"joe@drew.ca","author":"joe@drew.ca","time":"Thu Jul 23 06:37:19 EEST 2009","text":"Please file followup bugs for any remaining issues.","id":4212045,"bug_id":753,"tags":[]}]}
