{"bugs":[{"creation_time":"Fri Sep 11 04:45:03 EEST 1998","keywords":[],"see_also":[],"resolution":"FIXED","cf_blocking_fx":"---","cf_fx_iteration":"---","cf_status_b2g_1_4":"---","id":789,"is_open":false,"cf_qa_whiteboard":"","assigned_to_detail":{"name":"michaelp@formerly-netscape.com.tld","real_name":"","id":3820,"email":"michaelp@formerly-netscape.com.tld"},"creator_detail":{"name":"troy@formerly-netscape.com.tld","real_name":"","id":3825,"email":"troy@formerly-netscape.com.tld"},"cf_status_firefox37":"---","priority":"P2","cf_status_firefox36":"---","classification":"Graveyard","cf_status_firefox35":"---","version":"Trunk","cf_status_firefox34":"---","op_sys":"Windows NT","last_change_time":"Thu Jan 22 18:17:43 EET 2009","mentors_detail":[],"cf_tracking_b2g":"---","qa_contact_detail":{"name":"cmaximus@gmail.com","real_name":"Claudius Gayle","id":4130,"email":"cmaximus@gmail.com"},"cf_status_b2g_2_0m":"---","status":"VERIFIED","cf_tracking_firefox37":"---","is_cc_accessible":true,"cf_tracking_firefox36":"---","cf_tracking_relnote_b2g":"---","flags":[],"cf_status_firefox_esr31":"---","whiteboard":"","platform":"x86","cf_tracking_firefox_esr31":"---","cf_fx_points":"---","cf_tracking_firefox35":"---","cf_tracking_firefox34":"---","cf_status_b2g_2_2":"---","cf_status_b2g_2_1":"---","cf_status_b2g_2_0":"---","assigned_to":"michaelp@formerly-netscape.com.tld","cc":[],"summary":"about:blank leaks","severity":"normal","creator":"troy@formerly-netscape.com.tld","product":"Core Graveyard","depends_on":[],"cf_tracking_firefox_relnote":"---","blocks":[],"is_confirmed":true,"groups":[],"cf_last_resolved":"Mon Oct 05 21:27:47 EEST 1998","url":"","qa_contact":"cmaximus@gmail.com","target_milestone":"---","component":"GFX","is_creator_accessible":true,"cc_detail":[],"mentors":[],"cf_user_story":""}],"comments":[{"is_private":false,"creation_time":"Fri Sep 11 04:45:03 EEST 1998","creator":"troy@formerly-netscape.com.tld","author":"troy@formerly-netscape.com.tld","time":"Fri Sep 11 04:45:03 EEST 1998","text":"Michael,  Purify is reporting major leaks when bringing up the viewer with the about:blank URL and then quiting.  [W] MLK: Memory leak of 80 bytes from 1 block allocated in nsGfxFactoryWin::CreateInstance(nsISupports *,nsID const&,void * *) [W] MLK: Memory leak of 256 bytes from 1 block allocated in DeviceContextImpl::DeviceContextImpl(void) [W] MLK: Memory leak of 24 bytes from 1 block allocated in NS_NewFontCache [W] MLK: Memory leak of 48 bytes from 1 block allocated in nsFontMetricsWin::new(UINT) [W] MLK: Memory leak of 28 bytes from 1 block allocated in nsFontMetricsWin::Init(nsFont const&,nsIDeviceContext *) [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 4 bytes from 1 block allocated in DeviceContextImpl::CreateFontAliasTable(void) [W] MLK: Memory leak of 32 bytes from 1 block allocated in PR_Malloc [W] MLK: Memory leak of 1024 bytes from 1 block allocated in PR_Malloc [W] MLK: Memory leak of 16 bytes from 1 block allocated in nsString::ToNewString(void)const [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 84 bytes from 1 block allocated in StringKey::Clone(void)const [W] MLK: Memory leak of 32 bytes from 2 blocks allocated in PR_Malloc [W] MLK: Memory leak of 16 bytes from 1 block allocated in nsString::ToNewString(void)const [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 84 bytes from 1 block allocated in StringKey::Clone(void)const [W] MLK: Memory leak of 32 bytes from 2 blocks allocated in PR_Malloc [W] MLK: Memory leak of 32 bytes from 1 block allocated in nsVoidArray::InsertElementAt(void *,int) [W] MLK: Memory leak of 80 bytes from 1 block allocated in nsGfxFactoryWin::CreateInstance(nsISupports *,nsID const&,void * *) [W] MLK: Memory leak of 256 bytes from 1 block allocated in DeviceContextImpl::DeviceContextImpl(void) [W] MLK: Memory leak of 24 bytes from 1 block allocated in NS_NewFontCache [W] MLK: Memory leak of 48 bytes from 1 block allocated in nsFontMetricsWin::new(UINT) [W] MLK: Memory leak of 28 bytes from 1 block allocated in nsFontMetricsWin::Init(nsFont const&,nsIDeviceContext *) [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 4 bytes from 1 block allocated in DeviceContextImpl::CreateFontAliasTable(void) [W] MLK: Memory leak of 32 bytes from 1 block allocated in PR_Malloc [W] MLK: Memory leak of 1024 bytes from 1 block allocated in PR_Malloc [W] MLK: Memory leak of 16 bytes from 1 block allocated in nsString::ToNewString(void)const [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 84 bytes from 1 block allocated in StringKey::Clone(void)const [W] MLK: Memory leak of 16 bytes from 1 block allocated in nsString::ToNewString(void)const [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 84 bytes from 1 block allocated in StringKey::Clone(void)const [W] MLK: Memory leak of 32 bytes from 1 block allocated in nsVoidArray::InsertElementAt(void *,int) [W] MLK: Memory leak of 80 bytes from 1 block allocated in nsGfxFactoryWin::CreateInstance(nsISupports *,nsID const&,void * *) [W] MLK: Memory leak of 256 bytes from 1 block allocated in DeviceContextImpl::DeviceContextImpl(void) [W] MLK: Memory leak of 24 bytes from 1 block allocated in NS_NewFontCache [W] MLK: Memory leak of 48 bytes from 1 block allocated in nsFontMetricsWin::new(UINT) [W] MLK: Memory leak of 28 bytes from 1 block allocated in nsFontMetricsWin::Init(nsFont const&,nsIDeviceContext *) [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 4 bytes from 1 block allocated in DeviceContextImpl::CreateFontAliasTable(void) [W] MLK: Memory leak of 32 bytes from 1 block allocated in PR_Malloc [W] MLK: Memory leak of 1024 bytes from 1 block allocated in PR_Malloc [W] MLK: Memory leak of 16 bytes from 1 block allocated in nsString::ToNewString(void)const [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 84 bytes from 1 block allocated in StringKey::Clone(void)const [W] MLK: Memory leak of 32 bytes from 2 blocks allocated in PR_Malloc [W] MLK: Memory leak of 16 bytes from 1 block allocated in nsString::ToNewString(void)const [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 84 bytes from 1 block allocated in StringKey::Clone(void)const [W] MLK: Memory leak of 32 bytes from 2 blocks allocated in PR_Malloc [W] MLK: Memory leak of 32 bytes from 1 block allocated in nsVoidArray::InsertElementAt(void *,int) [I] MPK: Potential memory leak of 136 bytes from 1 block allocated in nsWidgetFactory::CreateInstance(nsISupports *,nsID const&,void * *) [W] MLK: Memory leak of 80 bytes from 1 block allocated in nsGfxFactoryWin::CreateInstance(nsISupports *,nsID const&,void * *) [W] MLK: Memory leak of 256 bytes from 1 block allocated in DeviceContextImpl::DeviceContextImpl(void) [W] MLK: Memory leak of 24 bytes from 1 block allocated in NS_NewFontCache [W] MLK: Memory leak of 48 bytes from 1 block allocated in nsFontMetricsWin::new(UINT) [W] MLK: Memory leak of 28 bytes from 1 block allocated in nsFontMetricsWin::Init(nsFont const&,nsIDeviceContext *) [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 4 bytes from 1 block allocated in DeviceContextImpl::CreateFontAliasTable(void) [W] MLK: Memory leak of 32 bytes from 1 block allocated in PR_Malloc [W] MLK: Memory leak of 1024 bytes from 1 block allocated in PR_Malloc [W] MLK: Memory leak of 16 bytes from 1 block allocated in nsString::ToNewString(void)const [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 84 bytes from 1 block allocated in StringKey::Clone(void)const [W] MLK: Memory leak of 16 bytes from 1 block allocated in nsString::ToNewString(void)const [W] MLK: Memory leak of 34 bytes from 1 block allocated in nsString::EnsureCapacityFor(int) [W] MLK: Memory leak of 84 bytes from 1 block allocated in StringKey::Clone(void)const [W] MLK: Memory leak of 32 bytes from 1 block allocated in nsVoidArray::InsertElementAt(void *,int)","id":2898,"bug_id":789,"tags":[]},{"is_private":false,"creation_time":"Mon Oct 05 21:27:59 EEST 1998","creator":"michaelp@formerly-netscape.com.tld","author":"michaelp@formerly-netscape.com.tld","time":"Mon Oct 05 21:27:59 EEST 1998","text":"reworked fontcache and metrics ownership.","id":2899,"bug_id":789,"tags":[]},{"is_private":false,"creation_time":"Thu Feb 04 16:38:59 EET 1999","creator":"rubydoo123@aol.com","author":"rubydoo123@aol.com","time":"Thu Feb 04 16:38:59 EET 1999","text":"Troy provide a test case for verification","id":2900,"bug_id":789,"tags":[]},{"is_private":false,"creation_time":"Tue Feb 09 00:54:59 EET 1999","creator":"cmaximus@gmail.com","author":"cmaximus@gmail.com","time":"Tue Feb 09 00:54:59 EET 1999","text":"installing myself as QA Contact en masse","id":2901,"bug_id":789,"tags":[]},{"is_private":false,"creation_time":"Tue Feb 16 19:32:59 EET 1999","creator":"rubydoo123@aol.com","author":"rubydoo123@aol.com","time":"Tue Feb 16 19:32:59 EET 1999","text":"marking verified per reporter","id":2902,"bug_id":789,"tags":[]}]}
